{"ast":null,"code":"import { usersAPI, profileAPI } from \"../../API/api\";\nconst ADD_POST = \"ADD-POST\";\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\nconst SET_STATUS = \"SET_STATUS\";\nconst DEL_POST = \"DEL_POST\";\nlet initialState = {\n  posts: [{\n    id: 1,\n    likesCount: 12,\n    message: \"Hello, BRO\"\n  }, {\n    id: 2,\n    likesCount: 4,\n    message: \"Hello, B\"\n  }, {\n    id: 3,\n    likesCount: 51,\n    message: \"Hell Oy\"\n  }, {\n    id: 4,\n    likesCount: 614,\n    message: \"airuqp ppq uqweh b\"\n  }, {\n    id: 5,\n    likesCount: 111,\n    message: \"It`s my first post!\"\n  }],\n  profile: null,\n  status: \"it is status in profileReduser\"\n};\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: action.myPostText,\n        likesCount: 0\n      };\n      return {\n        ...state,\n        posts: [...state.posts, newPost],\n        newPostText: \"\"\n      };\n    case SET_USER_PROFILE:\n      return {\n        ...state,\n        profile: action.profile\n      };\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.status\n      };\n    case DEL_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(p => p.id !== action.postId)\n      };\n    default:\n      return state;\n  }\n};\nexport const addPostActionCreator = myPostText => ({\n  type: ADD_POST,\n  myPostText\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const deletePost = postId => ({\n  type: DEL_POST,\n  postId\n});\nexport const savePhotoSuccess = postId => ({\n  type: DEL_POST,\n  postId\n});\nexport const getUserProfile = userId => async dispatch => {\n  let response = await usersAPI.getProfile(userId); // thunk\n  dispatch(setUserProfile(response.data));\n};\nexport const getStatus = userId => async dispatch => {\n  let response = await profileAPI.getStatus(userId); // thunk to\n  dispatch(setStatus(response.data));\n};\nexport const updateStatus = status => async dispatch => {\n  let response = await profileAPI.updateStatus(status);\n  if (!response.data.resultCode) {\n    dispatch(setStatus(status));\n  }\n};\nexport const savePhoto = file => async dispatch => {\n  let response = await profileAPI.savePhoto(file);\n  if (!response.data.resultCode) {\n    dispatch.setStatus(file);\n  }\n};\nexport default profileReducer;","map":{"version":3,"names":["usersAPI","profileAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","DEL_POST","initialState","posts","id","likesCount","message","profile","status","profileReducer","state","action","type","newPost","myPostText","newPostText","filter","p","postId","addPostActionCreator","setUserProfile","setStatus","deletePost","savePhotoSuccess","getUserProfile","userId","dispatch","response","getProfile","data","getStatus","updateStatus","resultCode","savePhoto","file"],"sources":["/Users/oskvernitel/lernJS/react/legendary-site/src/components/Redux/profileReducer.js"],"sourcesContent":["import { usersAPI, profileAPI } from \"../../API/api\";\n\nconst ADD_POST = \"ADD-POST\";\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\"\nconst SET_STATUS = \"SET_STATUS\"\nconst DEL_POST = \"DEL_POST\"\n\nlet initialState = {\n  posts: [\n    { id: 1, likesCount: 12, message: \"Hello, BRO\" },\n    { id: 2, likesCount: 4, message: \"Hello, B\" },\n    { id: 3, likesCount: 51, message: \"Hell Oy\" },\n    { id: 4, likesCount: 614, message: \"airuqp ppq uqweh b\" },\n    { id: 5, likesCount: 111, message: \"It`s my first post!\" }],\n    profile: null,\n    status: \"it is status in profileReduser\",\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: action.myPostText,\n        likesCount: 0,\n      };\n      return { ...state, posts: [...state.posts, newPost], newPostText: \"\" };\n    case SET_USER_PROFILE:\n      return { ...state, profile: action.profile };\n    case SET_STATUS:\n      return { ...state, status: action.status };\n    case DEL_POST:\n      return { ...state, posts: state.posts.filter(p => p.id !== action.postId) };\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = (myPostText) => ({ type: ADD_POST, myPostText });\nexport const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile});\nexport const setStatus = (status) => ({ type: SET_STATUS, status});\nexport const deletePost = (postId) => ({ type: DEL_POST, postId});\nexport const savePhotoSuccess = (postId) => ({ type: DEL_POST, postId});\n\nexport const getUserProfile = (userId) => async (dispatch) => { \n  let response = await usersAPI.getProfile(userId) // thunk\n  dispatch(setUserProfile(response.data))};\n\nexport const getStatus = (userId) => async (dispatch) => { \n  let response = await profileAPI.getStatus(userId) // thunk to\n  dispatch(setStatus(response.data))}\n\nexport const updateStatus = (status) => async (dispatch) => { \n  let response = await profileAPI.updateStatus(status)\n  if (!response.data.resultCode){ dispatch(setStatus(status)) }}\n\n export const savePhoto = (file) => async (dispatch) => {\n    let response = await profileAPI.savePhoto(file)\n    if (!response.data.resultCode) {dispatch.setStatus(file)}\n  }\n\nexport default profileReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}