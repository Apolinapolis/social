{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { authAPI, securityAPI } from \"../../API/api\";\nconst SET_USER_DATA = \"SET_USER_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\";\n\n/* export type initialStateType2 = {\n  userId: number | null\n  email: string | null\n  login: string | null\n  isAuth: boolean | null\n  captchaUrl: string | null\n} */\n\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        userId: \"weqwe\",\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const setUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  const response = await authAPI.me();\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n  }\n  {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n  if (response.data.resultCode === 0) {\n    dispatch(setUserData(null, null, null, false));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport default authReducer;","map":{"version":3,"names":["stopSubmit","authAPI","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","logout","url"],"sources":["/Users/oskvernitel/lernJS/react/site/src/components/Redux/authReducer.ts"],"sourcesContent":["import { stopSubmit } from \"redux-form\"\nimport { authAPI, securityAPI } from \"../../API/api\";\n\n\nconst SET_USER_DATA = \"SET_USER_DATA\"\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\"\n\n/* export type initialStateType2 = {\n  userId: number | null\n  email: string | null\n  login: string | null\n  isAuth: boolean | null\n  captchaUrl: string | null\n} */\n\nlet initialState = {\n  userId: null as number | null ,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false ,\n  captchaUrl: null as string | null,\n};\n\nexport type initialStateType = typeof initialState\n\nconst authReducer = (state = initialState, action: any): initialStateType => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return { userId: \"weqwe\" ,\n      ...state, ...action.payload }\n    default: return state\n  }\n}\n\ntype setUserDataPayloadType = {\n  userId: number | null\n  email: string | null\n  login: string | null\n  isAuth: boolean | null\n}\n\ntype setUserDataActionType = {\n  type: typeof SET_USER_DATA\n  payload: setUserDataPayloadType\n}\n\nexport const setUserData = (userId: number | null, email: string | null, login: string, isAuth: boolean): setUserDataActionType => (\n  { type: SET_USER_DATA, payload: { userId, email, login, isAuth } })\n\ntype getCaptchaUrlSuccessActionType = {\n  type: typeof GET_CAPTCHA_URL_SUCCESS\n  payload: { captchaUrl: string }\n}\n\nexport const getCaptchaUrlSuccess = (captchaUrl: string): getCaptchaUrlSuccessActionType => (\n  { type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } })\n\n\n\nexport const getAuthUserData = () => async (dispatch: any) => {\n  const response = await authAPI.me();\n  if (response.data.resultCode === 0) {\n    let { id, email, login } = response.data.data;\n    dispatch(setUserData(id, email, login, true));\n  }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl())\n    }\n  }\n\n  {\n    let message = response.data.messages.length > 0\n      ? response.data.messages[0]\n      : \"Some error\";\n    dispatch( stopSubmit (\"login\", { _error: message }));\n  }\n};\n\nexport const logout = () => async (dispatch: any) => {\n  let response = await authAPI.logout();\n  if (response.data.resultCode === 0) {\n    dispatch(setUserData(null, null, null, false));\n  }\n};\n\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n  const response = await securityAPI.getCaptchaUrl()\n  const captchaUrl = response.data.url\n  dispatch(getCaptchaUrlSuccess(captchaUrl))\n};\n\n\nexport default authReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}