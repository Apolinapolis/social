{"ast":null,"code":"import { usersAPI } from \"../../API/api\";\nconst ADD_POST = \"ADD-POST\";\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\nlet initialState = {\n  posts: [{\n    id: 1,\n    likesCount: 12,\n    message: \"Hello, BRO\"\n  }, {\n    id: 2,\n    likesCount: 4,\n    message: \"Hello, B\"\n  }, {\n    id: 3,\n    likesCount: 51,\n    message: \"Hell Oy\"\n  }, {\n    id: 4,\n    likesCount: 614,\n    message: \"airuqp ppq uqweh b\"\n  }, {\n    id: 5,\n    likesCount: 111,\n    message: \"It`s my first post!\"\n  }],\n  newPostText: \"fuck!\",\n  profile: null\n};\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: state.newPostText,\n        likesCount: 0\n      };\n      return {\n        ...state,\n        posts: [...state.posts, newPost],\n        newPostText: \"\"\n      };\n    case UPDATE_NEW_POST_TEXT:\n      return {\n        ...state,\n        newPostText: action.newText\n      };\n    case SET_USER_PROFILE:\n      return {\n        ...state,\n        profile: action.profile\n      };\n    default:\n      return state;\n  }\n};\nexport let addPostActionCreator = () => ({\n  type: ADD_POST\n});\nexport let setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport let getUserProfile = userId => dispatch => {\n  usersAPI.getProfile(userId).then(response => dispatch(setUserProfile(response.data)));\n};\nexport let updateNewPostTextActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});\nexport default profileReducer;","map":{"version":3,"names":["usersAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialState","posts","id","likesCount","message","newPostText","profile","profileReducer","state","action","type","newPost","newText","addPostActionCreator","setUserProfile","getUserProfile","userId","dispatch","getProfile","then","response","data","updateNewPostTextActionCreator","text"],"sources":["/Users/oskvernitel/lernJS/react/legendary-site/src/components/Redux/profileReducer.js"],"sourcesContent":["import { usersAPI } from \"../../API/api\";\n\nconst ADD_POST = \"ADD-POST\";\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\"\n\nlet initialState = {\n  posts: [\n    { id: 1, likesCount: 12, message: \"Hello, BRO\" },\n    { id: 2, likesCount: 4, message: \"Hello, B\" },\n    { id: 3, likesCount: 51, message: \"Hell Oy\" },\n    { id: 4, likesCount: 614, message: \"airuqp ppq uqweh b\" },\n    { id: 5, likesCount: 111, message: \"It`s my first post!\" },\n  ],\n  newPostText: \"fuck!\",\n  profile: null,\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: state.newPostText,\n        likesCount: 0,\n      };\n      return { ...state, posts: [...state.posts, newPost], newPostText: \"\" };\n    case UPDATE_NEW_POST_TEXT:\n      return { ...state, newPostText: action.newText };\n    case SET_USER_PROFILE:\n      return { ...state, profile: action.profile };\n    default:\n      return state;\n  }\n};\n\nexport let addPostActionCreator = () => ({ type: ADD_POST });\nexport let setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile});\n\nexport let getUserProfile = (userId) => (dispatch) => { usersAPI.getProfile(userId)\n  .then(response => dispatch(setUserProfile(response.data)))};\n  \nexport let updateNewPostTextActionCreator = (text) => ({type: UPDATE_NEW_POST_TEXT, newText: text});\n\nexport default profileReducer;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AAExC,MAAMC,QAAQ,GAAG,UAAU;AAC3B,MAAMC,oBAAoB,GAAG,sBAAsB;AACnD,MAAMC,gBAAgB,GAAG,kBAAkB;AAE3C,IAAIC,YAAY,GAAG;EACjBC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,CAAC;IAAEC,UAAU,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAa,CAAC,EAChD;IAAEF,EAAE,EAAE,CAAC;IAAEC,UAAU,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAW,CAAC,EAC7C;IAAEF,EAAE,EAAE,CAAC;IAAEC,UAAU,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAU,CAAC,EAC7C;IAAEF,EAAE,EAAE,CAAC;IAAEC,UAAU,EAAE,GAAG;IAAEC,OAAO,EAAE;EAAqB,CAAC,EACzD;IAAEF,EAAE,EAAE,CAAC;IAAEC,UAAU,EAAE,GAAG;IAAEC,OAAO,EAAE;EAAsB,CAAC,CAC3D;EACDC,WAAW,EAAE,OAAO;EACpBC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGR,YAAY,EAAES,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKb,QAAQ;MACX,IAAIc,OAAO,GAAG;QACZT,EAAE,EAAE,CAAC;QACLE,OAAO,EAAEI,KAAK,CAACH,WAAW;QAC1BF,UAAU,EAAE;MACd,CAAC;MACD,OAAO;QAAE,GAAGK,KAAK;QAAEP,KAAK,EAAE,CAAC,GAAGO,KAAK,CAACP,KAAK,EAAEU,OAAO,CAAC;QAAEN,WAAW,EAAE;MAAG,CAAC;IACxE,KAAKP,oBAAoB;MACvB,OAAO;QAAE,GAAGU,KAAK;QAAEH,WAAW,EAAEI,MAAM,CAACG;MAAQ,CAAC;IAClD,KAAKb,gBAAgB;MACnB,OAAO;QAAE,GAAGS,KAAK;QAAEF,OAAO,EAAEG,MAAM,CAACH;MAAQ,CAAC;IAC9C;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;AAED,OAAO,IAAIK,oBAAoB,GAAGA,CAAA,MAAO;EAAEH,IAAI,EAAEb;AAAS,CAAC,CAAC;AAC5D,OAAO,IAAIiB,cAAc,GAAIR,OAAO,KAAM;EAAEI,IAAI,EAAEX,gBAAgB;EAAEO;AAAO,CAAC,CAAC;AAE7E,OAAO,IAAIS,cAAc,GAAIC,MAAM,IAAMC,QAAQ,IAAK;EAAErB,QAAQ,CAACsB,UAAU,CAACF,MAAM,CAAC,CAChFG,IAAI,CAACC,QAAQ,IAAIH,QAAQ,CAACH,cAAc,CAACM,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;AAAA,CAAC;AAE7D,OAAO,IAAIC,8BAA8B,GAAIC,IAAI,KAAM;EAACb,IAAI,EAAEZ,oBAAoB;EAAEc,OAAO,EAAEW;AAAI,CAAC,CAAC;AAEnG,eAAehB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}